# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1
orbs:
  node: circleci/node@5.0.2
  aws-elastic-beanstalk: circleci/aws-elastic-beanstalk@2.0.1


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  build:
    executor: node/default # use the default executor defined within the orb
    steps:
      - checkout
      - run:
          command: sudo corepack enable
          name: Package manager
      - run:
          command: yarn install --immutable
      - run:
          command: npm run build
          name: Build app
  eb-demo:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - aws-elastic-beanstalk/setup
      - run:
          command: |
            eb create my-environment
            eb deploy my-environment
            eb status
          name: You may now use the EB CLI within this job

description: >
  Install and authenticate with the Elastic Beanstalk CLI. You must have your
  AWS auth environment variables set for [AKIAVZVWBIYKCLD4YR5I,
  aQWSI7qI12FlVaWCahQVH+Akm8JINLQqQlOxq0nV, ap-northeast-1].
steps:
  - run:
      command: |
        if [[ $EUID == 0 ]]; then export SUDO=""; else # Check if we are root
          export SUDO="sudo";
        fi

        SetupPython() {
            # setups python3
            $SUDO apt-get -qq -y install python3-dev
            SetupPipx
        }

        SetupPipx() {
            if [ "$(which pip | tail -1)" ]; then
                echo "pip found"
            else
                echo "pip not found"
                $SUDO apt-get update
                $SUDO apt-get install -qq -y python3-setuptools
                curl https://bootstrap.pypa.io/pip/3.5/get-pip.py | python3
            fi
            # install venv with system for pipx
            # by using pipx we dont have to worry about activating the virtualenv before using eb
            $SUDO apt-get -qq -y install python3-venv
            pip install pipx
        }

        InstallEBCLI() {
            if uname -a | grep Darwin > /dev/null 2>&1; then
                cd /tmp || { echo "Not able to access /tmp"; return; }
                git clone https://github.com/aws/aws-elastic-beanstalk-cli-setup.git
                brew install zlib openssl readline
                CFLAGS="-I$(brew --prefix openssl)/include -I$(brew --prefix readline)/include -I$(xcrun --show-sdk-path)/usr/include" LDFLAGS="-L$(brew --prefix openssl)/lib -L$(brew --prefix readline)/lib -L$(brew --prefix zlib)/lib" ./aws-elastic-beanstalk-cli-setup/scripts/bundled_installer >/dev/null 2>&1
                return $?
            elif uname -a | grep Linux > /dev/null 2>&1; then
                $SUDO apt-get -qq update > /dev/null
                # these are the system level deps for the ebcli
                $SUDO apt-get -qq -y install build-essential zlib1g-dev libssl-dev libncurses-dev libffi-dev libsqlite3-dev libreadline-dev libbz2-dev
                if [ "$(which python3 | tail -1)" ]; then
                    echo "Python3 env found"
                    SetupPipx
                else
                    echo "Python3 env not found, setting up python with apt"
                    SetupPython
                fi
            fi
                pipx install awsebcli
                echo "Complete"
        }

        CheckAWSEnvVars() {
            ERRMSGTEXT="has not been set. This environment variable is required for authentication."
            if [ -z "$AWS_ACCESS_KEY_ID" ]; then
                echo "AWS_ACCESS_KEY_ID $ERRMSGTEXT"
                exit 1
            fi
            if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
                echo "AWS_SECRET_ACCESS_KEY $ERRMSGTEXT"
                exit 1
            fi
            if [ -z "$AWS_DEFAULT_REGION" ]; then
                echo "AWS_DEFAULT_REGION $ERRMSGTEXT"
                exit 1
            fi
        }

        # Will not run if sourced for bats.
        # View src/tests for more information.
        TEST_ENV="bats-core"
        if [ "${0#*$TEST_ENV}" == "$0" ]; then
            CheckAWSEnvVars
            InstallEBCLI
        fi
      name: Setting Up Elastic Beanstalk CLI

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      - say-hello
  run-build:
    jobs:
      # - build
      - eb-demo
