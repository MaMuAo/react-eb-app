# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1
orbs:
  node: circleci/node@5.0.2
  eb: circleci/aws-elastic-beanstalk@2.0.1


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  build:
    executor: node/default # use the default executor defined within the orb
    steps:
      - checkout
      - run:
          command: sudo corepack enable
          name: Package manager
      - run:
          command: yarn install --immutable
      - run:
          command: npm run build
          name: Build app
  deploy:
    description: |
      Deploy an update to an existing AWS Elastic Beanstalk environment.
    docker:
      - image: cimg/base:stable
    # parameters:
    #   app-dir:
    #     default: .
    #     description: >-
    #       Path to the directory containing your application source code. My default,
    #       the current directory will be used.
    #     type: string
    #   application-name:
    #     default: 'react-eb-app'
    #     description: The name of the application (used during `eb init`).
    #     type: string
    #   description:
    #     default: ''
    #     description: >-
    #       The description for the application version, enclosed in double quotation
    #       marks.
    #     type: string
    #   environment-name:
    #     default: 'development-env'
    #     description: The name of the existing environment (created with `eb create`) to update.
    #     type: string
    #   image:
    #     default: 'cimg/base:stable'
    #     description: >-
    #       Enter a custom docker image for this job. By default CircleCI's optimized
    #       `cimg/base` image will be used.
    #     type: string
    #   label:
    #     default: ''
    #     description: >-
    #       Specify a label to use for the version that the EB CLI creates. If the
    #       label has already been used, the EB CLI redeploys the previous version
    #       with that label.
    #     type: string
    #   platform-version:
    #     default: Docker running on 64bit Amazon Linux 2
    #     description: >-
    #       The platform version to use. You can specify a platform, a platform and
    #       version, a platform branch, a solution stack name, or a solution stack
    #       ARN. Use 'eb platform list' to get a list of available configurations.
    #     type: string
    steps:
      - checkout
  #     - eb/setup
  #     - run:
  #         command: >
  #           "echo eb init <<parameters.application-name>> -r $AWS_DEFAULT_REGION -p
  #           <<parameters.platform-version>>"
  #           # eb init <<parameters.application-name>> -r $AWS_DEFAULT_REGION -p
  #           # <<parameters.platform-version>>
  #           # eb create development-env
  #           # eb status
  #           # eb deploy 'development-env' <<#parameters.label>>-l
  #           # <<parameters.label>><</parameters.label>> <<#parameters.description>>-m
  #           # <<parameters.description>><</parameters.description>>
  #         name: EB Deploy
  #         working_directory: <<parameters.app-dir>>

  # eb-demo:
  #   docker:
  #     - image: 'cimg/base:stable'
  #   steps:
  #     - checkout
  #     - eb/setup
  #     - run:
  #         command: |
  #           eb create development-env
  #           eb deploy
  #           eb status
  #         name: You may now use the EB CLI within this job

description: >
  Install and authenticate with the Elastic Beanstalk CLI. You must have your
  AWS auth environment variables set for ["AWS_ACCESS_KEY_ID",
  "AWS_SECRET_ACCESS_KEY", "AWS_DEFAULT_REGION"].
steps:
  - run:
      command: |
        if [[ $EUID == 0 ]]; then export SUDO=""; else # Check if we are root
          export SUDO="sudo";
        fi

        SetupPython() {
            # setups python3
            $SUDO apt-get -qq -y install python3-dev
            SetupPipx
        }

        SetupPipx() {
            if [ "$(which pip | tail -1)" ]; then
                echo "pip found"
            else
                echo "pip not found"
                $SUDO apt-get update
                $SUDO apt-get install -qq -y python3-setuptools
                curl https://bootstrap.pypa.io/pip/3.5/get-pip.py | python3
            fi
            # install venv with system for pipx
            # by using pipx we dont have to worry about activating the virtualenv before using eb
            $SUDO apt-get -qq -y install python3-venv
            pip install pipx
        }

        InstallEBCLI() {
            if uname -a | grep Darwin > /dev/null 2>&1; then
                cd /tmp || { echo "Not able to access /tmp"; return; }
                git clone https://github.com/aws/aws-elastic-beanstalk-cli-setup.git
                brew install zlib openssl readline
                CFLAGS="-I$(brew --prefix openssl)/include -I$(brew --prefix readline)/include -I$(xcrun --show-sdk-path)/usr/include" LDFLAGS="-L$(brew --prefix openssl)/lib -L$(brew --prefix readline)/lib -L$(brew --prefix zlib)/lib" ./aws-elastic-beanstalk-cli-setup/scripts/bundled_installer >/dev/null 2>&1
                return $?
            elif uname -a | grep Linux > /dev/null 2>&1; then
                $SUDO apt-get -qq update > /dev/null
                # these are the system level deps for the ebcli
                $SUDO apt-get -qq -y install build-essential zlib1g-dev libssl-dev libncurses-dev libffi-dev libsqlite3-dev libreadline-dev libbz2-dev
                if [ "$(which python3 | tail -1)" ]; then
                    echo "Python3 env found"
                    SetupPipx
                else
                    echo "Python3 env not found, setting up python with apt"
                    SetupPython
                fi
            fi
                pipx install awsebcli
                echo "Complete"
        }

        CheckAWSEnvVars() {
            ERRMSGTEXT="has not been set. This environment variable is required for authentication."
            if [ -z "$AWS_ACCESS_KEY_ID" ]; then
                echo "AWS_ACCESS_KEY_ID $ERRMSGTEXT"
                exit 1
            fi
            if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
                echo "AWS_SECRET_ACCESS_KEY $ERRMSGTEXT"
                exit 1
            fi
            if [ -z "$AWS_DEFAULT_REGION" ]; then
                echo "AWS_DEFAULT_REGION $ERRMSGTEXT"
                exit 1
            fi
        }

        # Will not run if sourced for bats.
        # View src/tests for more information.
        TEST_ENV="bats-core"
        if [ "${0#*$TEST_ENV}" == "$0" ]; then
            CheckAWSEnvVars
            InstallEBCLI
        fi
      name: Setting Up Elastic Beanstalk CLI

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      - say-hello
  run-build:
    jobs:
      # - build
      - eb/deploy:
      #     # requires:
      #     #   - build
          context: AWS
